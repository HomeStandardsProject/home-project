datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawRoom {
  id                       String                     @id
  type                     String
  rawSubmissionId          String
  RawSubmission            RawSubmission              @relation(fields: [rawSubmissionId], references: [id], onDelete: Cascade)
  RawRoomResponses         RawRoomResponses[]
  SubmissionRoomViolations SubmissionRoomViolations[]
}

model RawRoomResponses {
  id                  Int            @id @default(autoincrement())
  questionId          String
  answer              QuestionAnswer
  selectedMultiselect String?
  rawRoomId           String
  RawRoom             RawRoom        @relation(fields: [rawRoomId], references: [id], onDelete: Cascade)
}

model RawSubmission {
  id                       String                     @id
  userProvidedAddress      String
  formattedAddress         String
  city                     String                     @default("kingston")
  long                     String
  lat                      String
  unitNumber               String?
  rentalType               String
  numberOfBedrooms         Int
  totalRent                Float
  landlord                 String
  landlordOther            String?
  creationDate             DateTime                   @default(now())
  RawRoom                  RawRoom[]
  SubmissionRoomViolations SubmissionRoomViolations[]
}

model SubmissionRoomViolations {
  id              Int             @id @default(autoincrement())
  bylawId         String
  status          ViolationStatus
  generatedDate   DateTime        @default(now())
  rawSubmissionId String?
  rawRoomId       String
  RawRoom         RawRoom         @relation(fields: [rawRoomId], references: [id], onDelete: Cascade)
  RawSubmission   RawSubmission?  @relation(fields: [rawSubmissionId], references: [id])
}

model User {
  id                    Int      @id @default(autoincrement())
  email                 String
  subscribeToNewsletter Boolean
  createdAt             DateTime @default(now())
}

enum QuestionAnswer {
  YES
  NO
  UNSURE
}

enum ViolationStatus {
  violation
  unsure
}
